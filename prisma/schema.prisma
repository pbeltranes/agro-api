// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


// primero debe existir la fruta para poder existir la variedad
model Fruit {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  varieties Variety[]
}

model Variety {
  id      Int       @id @default(autoincrement())
  name    String
  fruitId Int
  fruit   Fruit     @relation(fields: [fruitId], references: [id])
  harvests Harvest[]

  @@unique([name, fruitId])
}
model Harvest {
// la cosecha debe tener una una finca y una variedad al menos
  id        Int      @id @default(autoincrement())
  varietyId Int
  variety   Variety  @relation(fields: [varietyId], references: [id])
  landId    Int
  land      Land     @relation(fields: [landId], references: [id])
  clientId  Int
  client    Client?   @relation(fields: [clientId], references: [id])
}

model Farmer {
  id       Int    @id @default(autoincrement())
  name     String
  lastName String
  email    String @unique
  lands    Land[]
}
// si se elimina un farmer se eliminan todas las fincas asociadas
// una finca debe tener un agricultor, si existe la finca con
model Land {
  id       Int       @id @default(autoincrement())
  name     String
  location String
  farmerId Int
  farmer   Farmer    @relation(fields: [farmerId], references: [id])
  lands    Harvest[]

  @@unique([name, location])
}

model Client {
  id       Int       @id @default(autoincrement())
  name     String
  lastName String
  email    String    @unique
  harvests Harvest[]
}
